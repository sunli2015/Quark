<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.0.xsd">
	<http pattern="/css/**" security="none"/>
	<http pattern="/style/**" security="none"/>
	<http pattern="/images/**" security="none"/>
	<http pattern="/common/**" security="none"/>
	<http pattern="/js/**" security="none"/>
	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.jpg" security="none"/>
	<http pattern="/**/*.png" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http pattern="/manager/login.do*" security="none"/>
  	<http pattern="/portal/*" security="none"/>
  	<!-- access-denied-page="/mportals/login.action?login_error=denied_error" -->
  	<http pattern="/**" auto-config='true' access-decision-manager-ref="accessDecisionManager">
    	<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />
    	<form-login login-page='/manager/login.do' default-target-url="/manager/main.do" 
    	authentication-failure-handler-ref="authenticationFailureHandler" />
    	<logout logout-success-url="/manager/login.do?logout=true" />
    	<custom-filter ref="quarkFilter" position="LAST"/>
    	<csrf disabled="true"/>
    	<anonymous enabled="false"/>
    	<headers>
    		<frame-options disabled="false" policy="SAMEORIGIN"/>
    	</headers>
    	<!-- <anonymous granted-authority="ROLE_ANONYMOUS" enabled="true" username="test"/> -->
  	</http>
  	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
  		<beans:constructor-arg>
  			<beans:list>
  				<beans:bean class="org.springframework.security.access.vote.RoleVoter"></beans:bean>
  				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"></beans:bean>
  			</beans:list>
  		</beans:constructor-arg>
  	</beans:bean>
  	<!-- core Filter config -->
  	<beans:bean id="quarkFilter" class="cn.org.quark.core.security.filter.CoralFilter"></beans:bean>
	<beans:bean id="authenticationFailureHandler" 
	class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<beans:property name="exceptionMappings">
			<beans:map>
			<beans:entry key="org.springframework.security.core.userdetails.UsernameNotFoundException" 
			value="/manager/login.do?login_error=user_not_found_error"/>
			<beans:entry key="org.springframework.security.authentication.BadCredentialsException" 
			value="/manager/login.do?login_error=user_psw_error"/>
			<beans:entry key="org.springframework.security.authentication.DisabledException" 
			value="/manager/login.do?login_error=disabled_user_error"/>
			</beans:map>
		</beans:property>
	</beans:bean>
	
	<authentication-manager>
    	<authentication-provider>
    	<password-encoder hash="md5"></password-encoder>
    	<jdbc-user-service data-source-ref="dataSource"
    	users-by-username-query="select logid username,password,status enabled from core_users where logid = ?"
    	authorities-by-username-query="select t1.logid username,t3.rolecode authority 
    	from core_users t1, CORE_USER_ROLE t2, core_roles t3 
    	where t1.oid=t2.userid and t2.roleid=t3.oid and 
    	t1.logid=?"/>
    	</authentication-provider>
  	</authentication-manager>
  	<!-- authentication-provider:org.springframework.security.authentication.dao.DaoAuthenticationProvider-hideUserNotFoundExceptions -->
  	<!-- user-service-ref: org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl-->
  	<beans:bean id="filterSecurityInterceptor"
        class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" autowire="byType">
        <beans:property name="securityMetadataSource" ref="filterInvocationSecurityMetadataSource" />
        <beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager"/>
    </beans:bean>
  	<beans:bean id="filterInvocationSecurityMetadataSource"
        class="cn.org.quark.core.security.JdbcFilterInvocationDefinitionSourceFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
	    <beans:property name="resourceQuery" value="
	         select re.res_string,r.ROLECODE
             from core_roles r join CORE_ROLE_RESOURCE rr on r.oid=rr.ROLEID
             join CORE_RESOURCES re on re.oid=rr.resid "/>
    </beans:bean>
    <!-- password md5 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"></beans:bean>
	<!-- query loginer object -->
	<beans:bean id="loginerManager" class="cn.org.quark.core.security.manager.LoginerManager">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="loginerQuery">
			<beans:value>select t1.oid,t1.logid,t1.cname,t1.password,t2.oid deptid,t2.deptname 
				from core_users t1, core_dept t2 
				where t1.dept_oid=t2.oid  and t1.logid=? and t1.status=1
			</beans:value>
		</beans:property>
	</beans:bean>
	<beans:bean id="authResourceManager" class="cn.org.quark.core.security.manager.ResourceManager">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="queryAuthByResTag">
			<beans:value>select re.res_string,r.ROLECODE
             from core_roles r join CORE_ROLE_RESOURCE rr on r.oid=rr.ROLEID
             join CORE_RESOURCES re on re.oid=rr.resid where re.rcode=?</beans:value>
		</beans:property>
	</beans:bean>
</beans:beans>